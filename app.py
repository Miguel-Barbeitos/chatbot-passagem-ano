import streamlit as st
import json, random, os, time, re, unicodedata
from datetime import datetime
from learning_qdrant import guardar_mensagem, procurar_resposta_semelhante

# =====================================================
# ‚öôÔ∏è Configura√ß√£o
# =====================================================
st.set_page_config(page_title="üéâ Chatbot üéÜ", page_icon="üéÜ")
st.title("üéâ Assistente da Passagem de Ano 2025/2026 üéÜ")

# =====================================================
# üîß Utilit√°rios
# =====================================================
def normalizar(txt: str) -> str:
    """Min√∫sculas, remover acentos, pontua√ß√£o e espa√ßos duplicados."""
    if not isinstance(txt, str):
        return ""
    t = txt.lower().strip()
    t = unicodedata.normalize("NFKD", t)
    t = "".join(c for c in t if not unicodedata.combining(c))
    t = re.sub(r"[^\w\s]", " ", t)
    t = re.sub(r"\s+", " ", t).strip()
    return t

def carregar_json(path):
    if os.path.exists(path):
        with open(path, encoding="utf-8") as f:
            return json.load(f)
    return {}

# =====================================================
# üìÇ Dados
# =====================================================
profiles = carregar_json("profiles.json")
event = carregar_json("event.json")

# =====================================================
# üßç Identifica√ß√£o
# =====================================================
nomes = [p["nome"] for p in profiles]
params = st.query_params

if "user" not in st.session_state:
    if "user" in params and params["user"] in nomes:
        st.session_state["user"] = params["user"]
    else:
        nome_sel = st.selectbox("Quem √©s tu?", nomes)
        if st.button("Confirmar"):
            st.session_state["user"] = nome_sel
            st.query_params["user"] = nome_sel
            st.rerun()
        st.stop()

nome = st.session_state["user"]
perfil = next(p for p in profiles if p["nome"] == nome)

# =====================================================
# üëã Sauda√ß√£o inicial
# =====================================================
hora = datetime.now().hour
saud = "Bom dia" if hora < 12 else "Boa tarde" if hora < 20 else "Boa noite"
st.success(f"{saud}, {nome}! üëã Bem-vindo ao Assistente da Passagem de Ano!")

# =====================================================
# üí¨ Interface
# =====================================================
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

prompt = st.chat_input("Escreve aqui a tua mensagem üëá")

# =====================================================
# üß† Gera√ß√£o de resposta
# =====================================================
def gerar_resposta(pergunta, perfil):
    pergunta_l = normalizar(pergunta)

    # 1Ô∏è‚É£ ‚Äî Procurar respostas no Qdrant (intelig√™ncia vetorial)
    resposta_memoria = procurar_resposta_semelhante(pergunta_l, limite_conf=0.7, top_k=3)
    if resposta_memoria:
        guardar_mensagem(perfil["nome"], pergunta_l, resposta_memoria, perfil)
        return ajustar_tom_por_perfil(resposta_memoria, perfil)

    # 2Ô∏è‚É£ ‚Äî Regras b√°sicas (fallback)
    if any(p in pergunta_l for p in ["como te chamas", "quem es tu", "qual e o teu nome", "te chamas"]):
        return ajustar_tom_por_perfil("Sou o Di√°cono Rem√©dios, ao vosso servi√ßo üôèüòÑ", perfil)

    if any(p in pergunta_l for p in ["onde", "local", "sitio", "morada", "porto", "fica longe"]):
        local = event.get("local", "Casa do Miguel, Porto")
        return ajustar_tom_por_perfil(f"A festa vai ser em **{local}** üéâ", perfil)

    if any(p in pergunta_l for p in ["hora", "quando", "que horas", "a que horas"]):
        return ajustar_tom_por_perfil(f"Come√ßa √†s **{event.get('hora', '21h00')}** ‚Äî e promete durar at√© ao nascer do sol üåÖ", perfil)

    if any(p in pergunta_l for p in ["wifi", "wi fi", "internet", "rede"]):
        return ajustar_tom_por_perfil(f"A senha do Wi-Fi √© **{event.get('wifi', 'CasaDoMiguel2025')}** üì∂", perfil)

    if any(p in pergunta_l for p in ["dress", "roupa", "vestir", "codigo", "cor", "amarelo"]):
        return ajustar_tom_por_perfil(
            f"O dress code √© **{event.get('dress_code', 'casual elegante')}**, e a cor deste ano √© **amarelo üíõ**.", perfil
        )

    respostas_default = [
        "Vai ser uma noite √©pica üéâ",
        "S√≥ posso dizer que vai haver surpresas üòâ",
        "N√£o revelo tudo, mas vai ser memor√°vel üéÜ"
    ]
    resposta = random.choice(respostas_default)
    guardar_mensagem(perfil["nome"], pergunta_l, resposta, perfil)
    return ajustar_tom_por_perfil(resposta, perfil)

# =====================================================
# üé≠ Ajustar o tom conforme o perfil
# =====================================================
def ajustar_tom_por_perfil(resposta, perfil):
    tipo = perfil.get("personalidade", "neutro").lower()

    humor_extra = {
        "divertido": ["üòÇ", "üòé", "üéâ", "üòâ", "O Di√°cono aprova! üôå", "Que comece a festa! ü•≥"],
        "extrovertido": ["üî•", "üíÉüï∫", "üòÑ", "Isso vai ser √©pico!", "O DJ j√° sabe o teu nome üòú"],
        "s√©rio": ["Entendido.", "Percebo.", "Certo.", "üëç"],
        "formal": ["Com os meus melhores cumprimentos.", "Ser√° um prazer receb√™-lo.", "Tenha uma excelente noite."],
        "sarcastico": ["Ah pois claro‚Ä¶ üôÉ", "Pergunta ret√≥rica ou quer mesmo saber? üòè", "Com tanto suspense, parece novela das 9 üòÖ"],
        "calmo": ["Tudo tranquilo, sem stress. ‚ú®", "Vai correr tudo bem. üåô", "Mant√©m o esp√≠rito leve. üïäÔ∏è"]
    }

    if tipo in humor_extra:
        extra = random.choice(humor_extra[tipo])
        resposta = f"{resposta} {extra}"

    return resposta

# =====================================================
# üí¨ Ciclo da conversa
# =====================================================
if prompt:
    st.session_state.chat_history.append(("user", prompt))
    with st.spinner("üí≠ O Di√°cono est√° a pensar..."):
        time.sleep(0.8)
        resposta = gerar_resposta(prompt, perfil)
    st.session_state.chat_history.append(("bot", resposta))

# Mostrar conversa
for role, msg in st.session_state.chat_history:
    if role == "user":
        st.markdown(f"**{nome}:** {msg}")
    else:
        st.markdown(f"**Assistente:** {msg}")
